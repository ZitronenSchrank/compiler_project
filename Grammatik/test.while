def isNotZero(s1);
def isZero(s1);
def mul(s1, s2);
def addRec(s1, s2);

// Addition But Recursive
addRec(s1, s2) begin:
    var retVal := 0;

    var isZero := isZero(s2);
    var isNotZero := isNotZero(s2);
    loop(isZero) begin:
        retVal := s1;
    end
    loop(isNotZero) begin:
        pred(s2);
        succ(s1);
        retVal := addRec(s1, s2);
    end

    return retVal;
end

// Addition
def add(s1, s2) begin:
    var retVal := s1;

    while(s2) begin:
        succ(retVal);
        pred(s2);
    end

    return retVal;
end

// Multiplication
mul(s1, s2) begin:
    var retVal := 0;

    loop(s2) begin:
        retVal := add(retVal, s1);
    end

    return retVal;
end

// isZero
isZero(s1) begin:
    var retVal := 1;

    while(s1) begin:
        retVal := 0;
        s1 := 0;
    end

    return retVal;
end

// isNotZero
isNotZero(s1) begin:
    var _retVal := 0;

    while(s1) begin:
        _retVal := 1;
        s1 := 0;
    end

    return _retVal;
end
 
var r_0 := read();
var r1 := read();

var erg := mul(r_0, r1);
var zero := isZero(r1);
var notZero := isNotZero(r1);

write(erg, zero, notZero);