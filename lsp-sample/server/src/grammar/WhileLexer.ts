// Generated from /home/zitrone/Documents/OwnProjects/WhileProjects/compiler_project/Grammatik/While.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class WhileLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly WRITE = 5;
	public static readonly READ = 6;
	public static readonly WHILE = 7;
	public static readonly SUCC = 8;
	public static readonly PRED = 9;
	public static readonly LOOP = 10;
	public static readonly DEFINE = 11;
	public static readonly VARIABLE = 12;
	public static readonly BEGIN = 13;
	public static readonly END = 14;
	public static readonly RETURN = 15;
	public static readonly ASSIGN = 16;
	public static readonly SEMICOLON = 17;
	public static readonly ID = 18;
	public static readonly NUM = 19;
	public static readonly COMMENT = 20;
	public static readonly WS = 21;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "WRITE", "READ", "WHILE", "SUCC", "PRED", 
		"LOOP", "DEFINE", "VARIABLE", "BEGIN", "END", "RETURN", "ASSIGN", "SEMICOLON", 
		"ID", "NUM", "COMMENT", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'('", "')'", "':'", "','", "'write'", "'read'", "'while'", 
		"'succ'", "'pred'", "'loop'", "'def'", "'var'", "'begin'", "'end'", "'return'", 
		"':='", "';'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, "WRITE", "READ", 
		"WHILE", "SUCC", "PRED", "LOOP", "DEFINE", "VARIABLE", "BEGIN", "END", 
		"RETURN", "ASSIGN", "SEMICOLON", "ID", "NUM", "COMMENT", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(WhileLexer._LITERAL_NAMES, WhileLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return WhileLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(WhileLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "While.g4"; }

	// @Override
	public get ruleNames(): string[] { return WhileLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return WhileLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return WhileLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return WhileLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x17\x96\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x03\x02\x03" +
		"\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03" +
		"\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03" +
		"\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03" +
		"\f\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03" +
		"\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03" +
		"\x13\x07\x13v\n\x13\f\x13\x0E\x13y\v\x13\x03\x14\x03\x14\x03\x14\x07\x14" +
		"~\n\x14\f\x14\x0E\x14\x81\v\x14\x05\x14\x83\n\x14\x03\x15\x03\x15\x03" +
		"\x15\x03\x15\x07\x15\x89\n\x15\f\x15\x0E\x15\x8C\v\x15\x03\x15\x03\x15" +
		"\x03\x16\x06\x16\x91\n\x16\r\x16\x0E\x16\x92\x03\x16\x03\x16\x02\x02\x02" +
		"\x17\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F" +
		"\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F" +
		"\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16" +
		"+\x02\x17\x03\x02\b\x04\x02C\\c|\x05\x022;C\\c|\x03\x023;\x03\x022;\x04" +
		"\x02\f\f\x0F\x0F\x05\x02\v\f\x0F\x0F\"\"\x02\x9A\x02\x03\x03\x02\x02\x02" +
		"\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02" +
		"\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02" +
		"\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02" +
		"\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02" +
		"\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02" +
		"#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03" +
		"\x02\x02\x02\x02+\x03\x02\x02\x02\x03-\x03\x02\x02\x02\x05/\x03\x02\x02" +
		"\x02\x071\x03\x02\x02\x02\t3\x03\x02\x02\x02\v5\x03\x02\x02\x02\r;\x03" +
		"\x02\x02\x02\x0F@\x03\x02\x02\x02\x11F\x03\x02\x02\x02\x13K\x03\x02\x02" +
		"\x02\x15P\x03\x02\x02\x02\x17U\x03\x02\x02\x02\x19Y\x03\x02\x02\x02\x1B" +
		"]\x03\x02\x02\x02\x1Dc\x03\x02\x02\x02\x1Fg\x03\x02\x02\x02!n\x03\x02" +
		"\x02\x02#q\x03\x02\x02\x02%s\x03\x02\x02\x02\'\x82\x03\x02\x02\x02)\x84" +
		"\x03\x02\x02\x02+\x90\x03\x02\x02\x02-.\x07*\x02\x02.\x04\x03\x02\x02" +
		"\x02/0\x07+\x02\x020\x06\x03\x02\x02\x0212\x07<\x02\x022\b\x03\x02\x02" +
		"\x0234\x07.\x02\x024\n\x03\x02\x02\x0256\x07y\x02\x0267\x07t\x02\x027" +
		"8\x07k\x02\x0289\x07v\x02\x029:\x07g\x02\x02:\f\x03\x02\x02\x02;<\x07" +
		"t\x02\x02<=\x07g\x02\x02=>\x07c\x02\x02>?\x07f\x02\x02?\x0E\x03\x02\x02" +
		"\x02@A\x07y\x02\x02AB\x07j\x02\x02BC\x07k\x02\x02CD\x07n\x02\x02DE\x07" +
		"g\x02\x02E\x10\x03\x02\x02\x02FG\x07u\x02\x02GH\x07w\x02\x02HI\x07e\x02" +
		"\x02IJ\x07e\x02\x02J\x12\x03\x02\x02\x02KL\x07r\x02\x02LM\x07t\x02\x02" +
		"MN\x07g\x02\x02NO\x07f\x02\x02O\x14\x03\x02\x02\x02PQ\x07n\x02\x02QR\x07" +
		"q\x02\x02RS\x07q\x02\x02ST\x07r\x02\x02T\x16\x03\x02\x02\x02UV\x07f\x02" +
		"\x02VW\x07g\x02\x02WX\x07h\x02\x02X\x18\x03\x02\x02\x02YZ\x07x\x02\x02" +
		"Z[\x07c\x02\x02[\\\x07t\x02\x02\\\x1A\x03\x02\x02\x02]^\x07d\x02\x02^" +
		"_\x07g\x02\x02_`\x07i\x02\x02`a\x07k\x02\x02ab\x07p\x02\x02b\x1C\x03\x02" +
		"\x02\x02cd\x07g\x02\x02de\x07p\x02\x02ef\x07f\x02\x02f\x1E\x03\x02\x02" +
		"\x02gh\x07t\x02\x02hi\x07g\x02\x02ij\x07v\x02\x02jk\x07w\x02\x02kl\x07" +
		"t\x02\x02lm\x07p\x02\x02m \x03\x02\x02\x02no\x07<\x02\x02op\x07?\x02\x02" +
		"p\"\x03\x02\x02\x02qr\x07=\x02\x02r$\x03\x02\x02\x02sw\t\x02\x02\x02t" +
		"v\t\x03\x02\x02ut\x03\x02\x02\x02vy\x03\x02\x02\x02wu\x03\x02\x02\x02" +
		"wx\x03\x02\x02\x02x&\x03\x02\x02\x02yw\x03\x02\x02\x02z\x83\x072\x02\x02" +
		"{\x7F\t\x04\x02\x02|~\t\x05\x02\x02}|\x03\x02\x02\x02~\x81\x03\x02\x02" +
		"\x02\x7F}\x03\x02\x02\x02\x7F\x80\x03\x02\x02\x02\x80\x83\x03\x02\x02" +
		"\x02\x81\x7F\x03\x02\x02\x02\x82z\x03\x02\x02\x02\x82{\x03\x02\x02\x02" +
		"\x83(\x03\x02\x02\x02\x84\x85\x071\x02\x02\x85\x86\x071\x02\x02\x86\x8A" +
		"\x03\x02\x02\x02\x87\x89\n\x06\x02\x02\x88\x87\x03\x02\x02\x02\x89\x8C" +
		"\x03\x02\x02\x02\x8A\x88\x03\x02\x02\x02\x8A\x8B\x03\x02\x02\x02\x8B\x8D" +
		"\x03\x02\x02\x02\x8C\x8A\x03\x02\x02\x02\x8D\x8E\b\x15\x02\x02\x8E*\x03" +
		"\x02\x02\x02\x8F\x91\t\x07\x02\x02\x90\x8F\x03\x02\x02\x02\x91\x92\x03" +
		"\x02\x02\x02\x92\x90\x03\x02\x02\x02\x92\x93\x03\x02\x02\x02\x93\x94\x03" +
		"\x02\x02\x02\x94\x95\b\x16\x02\x02\x95,\x03\x02\x02\x02\t\x02w\x7F\x82" +
		"\x8A\x90\x92\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!WhileLexer.__ATN) {
			WhileLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(WhileLexer._serializedATN));
		}

		return WhileLexer.__ATN;
	}

}

